// üìå –ú–∞—Å—Å–∏–≤—ã –≤ JavaScript

//===============================================================================================//
// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∏ –µ–≥–æ –¥–ª–∏–Ω–∞

const numbers = [11, 22, 33, 55, 66];

console.log(numbers.length); // 5 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)

//===============================================================================================//
// üîπ –î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞ (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)

console.log(numbers[0]); // 11 (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç)
console.log(numbers[1]); // 22 (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç)
console.log(numbers[numbers.length - 1]); // 66 (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
console.log(numbers.at(-1)); // 66 (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)

//===============================================================================================//
// üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–º

console.log(Array.isArray(numbers)); // true

//===============================================================================================//
// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã, –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

function getArrayBound(arr) {
    if (!Array.isArray(arr)) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–∏–≤ –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤(–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –∏–ª–∏ false)
        return null;           // –ü–æ—Å–ª–µ return –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –∏–¥—ë—Ç
    }
    return [arr.length, arr[0], arr[arr.length - 1]];
}

console.log(getArrayBound(numbers)); // [5, 11, 66]

//===============================================================================================//
// üîπ –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º for

let sumOfNumbers = 0;

for (let i = 0; i < numbers.length; i++) {
    sumOfNumbers += numbers[i];
}

console.log(`Result: ${sumOfNumbers}`); // 187

// üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞
function sum(arr) {
    let sumOfNumbers = 0;
    for (let i = 0; i < arr.length; i++) {
        sumOfNumbers += arr[i];
    }
    return sumOfNumbers;
}

console.log(`Result: ${sum(numbers)}`); // 187

//===============================================================================================//
// üîπ –ü–µ—Ä–µ–¥–∞—á–∞ –º–∞—Å—Å–∏–≤–∞ –ø–æ —Å—Å—ã–ª–∫–µ (–∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤)

const arr = numbers;
arr[2] = 1000; // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç

console.log(numbers); // [11, 22, 1000, 55, 66] (–∏–∑–º–µ–Ω–∏–ª—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª)

//===============================================================================================//
// üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤

const people = ['Tom', 'Ann', 'Bob'];
people.push('Jack', 'John')
// people[people.length] = 'Jack' //–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü

// people.push('Jack');     // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü
// people.unshift('John');  // –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ
// people.pop();            // –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç(–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —ç–ª. –≤ –∫–æ–Ω—Ü–µ) 
// people.shift();          // –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç(–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —ç–ª. –≤ –Ω–∞—á–∞–ª–µ)

console.log(people); // [ 'Tom', 'Ann', 'Bob' ]

//===============================================================================================//
// üîπ –ü–æ–∏—Å–∫ —á–∏—Å–µ–ª, –∫—Ä–∞—Ç–Ω—ã—Ö 3
// from, to => [n% 3 === 0]

function getSpecialNumbers(from, to) {
    let specialNumbers = [];
    for (let i = from; i <= to; i++) {
        if (i % 3 === 0) {
            specialNumbers.push(i);
        }
    }
    return specialNumbers;
}

console.log(getSpecialNumbers(10, 30)); // [12, 15, 18, 21, 24, 27, 30]

//===============================================================================================//
// üîπ –û–ø–µ—Ä–∞—Ç–æ—Ä spread –∏ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞

// const numbers = [11, 22, 33, 55, 66]
// const a = numbers[0]
// const b = numbers[1]
// console.log(a, b)

// const numbers = [11, 22, 33, 55, 66]
// const [a, b, c, d, e, f] = numbers
// console.log(a, b ,d)

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ —Ñ—Ä—É–∫—Ç–∞—Ö
const fruits = ["—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–≤–∏—à–Ω—è"]
const [fruit1, fruit2] = fruits;
console.log(fruit1); // "—è–±–ª–æ–∫–æ"
console.log(fruit2); // "–±–∞–Ω–∞–Ω"

// –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∑–∞–ø—è—Ç—ã—Ö
const fruits1 = ["—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–≤–∏—à–Ω—è"]
const [first, , third] = fruits1
console.log(third)
console.log(first)

// –û–ø–µ—Ä–∞—Ç–æ—Ä ... –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª. –º–∞—Å—Å–∏–≤–∞
// –û–Ω –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ –º–∞—Å—Å–∏–≤–∞
const numbersArr =  [11, 22, 33, 55, 66]
const [a, b, ...rest] = numbersArr;

console.log(a, b, rest); // 11 22 [33, 55, 66]

// const numbers = [11, 22, 33, 55, 66]
// const [a, b, ...rest] = numbers
// console.log(a, b, rest)
// console.log(a, b, [1, 2, 3, ...rest, 6, 7])

// üìå –§—É–Ω–∫—Ü–∏—è swap: –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω–µ—Ü

function swap(arr) {
    const [first, ...rest] = arr;
    return [...rest, first];
}

console.log(swap(numbersArr)); // [22, 33, 55, 66, 11]

//===============================================================================================//
// üîπ –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º for..of

function sumWithForOf(arr) {
    let total = 0;
    for (let num of arr) {
        total += num;
    }
    return total;
}

console.log(`Result: ${sumWithForOf(numbersArr)}`); // 187

//===============================================================================================//
// üéØ –ò—Ç–æ–≥:
// ‚úÖ –ú–∞—Å—Å–∏–≤—ã –∏–Ω–¥–µ–∫—Å–∏—Ä—É—é—Ç—Å—è —Å 0, –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ `length - 1` –∏–ª–∏ `.at(-1)`.
// ‚úÖ `Array.isArray()` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–º.
// ‚úÖ –ú–µ—Ç–æ–¥—ã `push`, `pop`, `shift`, `unshift` —É–ø—Ä–∞–≤–ª—è—é—Ç —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∞—Å—Å–∏–≤–∞.
// ‚úÖ Spread `...` –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤—ã.
// ‚úÖ –ú–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è **–ø–æ —Å—Å—ã–ª–∫–µ**, –∞ –Ω–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é.







































































































